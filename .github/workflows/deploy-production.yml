name: Deploy-Kubernetes

on:
  push:
    branches:
      - master

env:
  AWS_DEFAULT_REGION: ap-southeast-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_IMAGE: cwdb-api:${{ github.sha }}

jobs:
  # test:
  #   name: Run some test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Start app
  #       run: docker-compose up -d

  #     - name: Restore data
  #       run: |
  #         docker cp ./seed/books.json complete-web-development-bootcamp-mongo:/tmp/books.json
  #         docker exec complete-web-development-bootcamp-mongo mongoimport --uri "mongodb://cwdb101:!cwdb101!@complete-web-development-bootcamp-mongo:27017/bootcamp?authSource=admin&authMechanism=SCRAM-SHA-1" -c books --drop --file /tmp/books.json

  #     - name: Integration test
  #       id: run-newman
  #       uses: anthonyvscode/newman-action@v1
  #       with:
  #         collection: postman/Complete-Web-Developer-Bootcamp-API.postman_collection.json
  #         environment: postman/Bootcamp-Local.postman_environment.json
  #         reporters: cli

  # build:
  #   name: Build and push image
  #   runs-on: ubuntu-latest
  #   needs: [test]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./docker-temp/Dockerfile
  #         platforms: linux/amd64,linux/arm64,linux/386
  #         push: true
  #         tags: chillshyld/cwdb:${{ github.sha }}

  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}

  build-and-push:
    name: Building and pushing image to AWS ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup ECR
        run: |
          $( aws ecr get-login --no-include-email )

      - name: Build and tag the image
        run: |
          docker build \
            -t $CONTAINER_IMAGE \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE -f docker-temp/Dockerfile .

      - name: Push
        if: github.ref == 'refs/heads/master'
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE

  # deploy:
  #   name: deploy to cluster
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-southeast-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: deploy to cluster
  #       uses: kodermax/kubectl-aws-eks@master
  #       env:
  #         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: cwdb-api
  #         IMAGE_TAG: ${{ github.sha }}
  #       with:
  #         args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  #     - name: verify deployment
  #       uses: kodermax/kubectl-aws-eks@master
  #       env:
  #         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  #       with:
  #         args: rollout status deployment/cwdb-api
